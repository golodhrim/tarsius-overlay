#!/bin/sh

#
# This is just a sample implementation of a slightly less primitive
# interface than xinit.  It looks for user .xinitrc and .xserverrc
# files, then system xinitrc and xserverrc files, else lets xinit choose
# its default.  The system xinitrc should probably do things like check
# for .Xresources files and merge them in, startup up a window manager,
# and pop a clock and serveral xterms.
#
# Site administrators are STRONGLY urged to write nicer versions.
#

unset DBUS_SESSION_BUS_ADDRESS
unset SESSION_MANAGER

userclientrc=$HOME/.xinitrc
sysclientrc=/etc/X11/xinit/xinitrc
userserverrc=$HOME/.xserverrc
sysserverrc=/etc/X11/xinit/xserverrc
defaultclient=xterm
defaultserver=/usr/bin/X
defaultclientargs=""
defaultserverargs=""
defaultdisplay=":0"
clientargs=""
serverargs=""

enable_xauth=1

whoseargs="client"
while [ -n "$1" ]
do
	case "$1" in
		/*|\./*)
			if [ "$whoseargs" = "client" ]
			then
				if [ -z "$client" -a -z "$clientargs" ]
				then
					client="$1"
				else
					clientargs="$clientargs $1"
				fi
			else
				if [ -z "$server" -a -z "$serverargs" ]
				then
					server="$1"
				else
					serverargs="$serverargs $1"
				fi
			fi
			;;
		--)
			whoseargs="server"
			;;
		*)
			if [ "$whoseargs" = "client" ]
			then
				clientargs="$clientargs $1"
			else
				# display must be the FIRST server argument
				if [ -z "$serverargs" ] && \
					expr "$1" : ':[0-9][0-9]*$' > /dev/null 2>&1
				then
					display="$1"
				else
					serverargs="$serverargs $1"
				fi
			fi
			;;
	esac
	shift
done

# process client arguments
if [ -z "$client" ]
then
	client=$defaultclient

	# if no client arguments either, use rc file instead
	if [ -z "$clientargs" ]
	then
		if [ -f "$userclientrc" ]
		then
			client=$userclientrc
		elif [ -f "$sysclientrc" ]
		then
			client=$sysclientrc
		fi

		clientargs=$defaultclientargs
	fi
fi

# process server arguments
if [ -z "$server" ]
then
	server=$defaultserver

	# if no server arguments or display either, use defaults
	if [ -z "$serverargs" -a -z "$display" ]
	then
		# For compatibility reasons, only use xserverrc if there were no
		# server command line arguments
		if [ -f "$userserverrc" ]
		then
			server=$userserverrc
		elif [ -f "$sysserverrc" ]
		then
			server=$sysserverrc
		fi

		serverargs=$defaultserverargs
		display=$defaultdisplay
	fi
fi

if [ -n "$enable_xauth" ]
then
	if [ -z "$XAUTHORITY" ]
	then
		XAUTHORITY=$HOME/.Xauthority
		export XAUTHORITY
	fi

	removelist=

	# set up default Xauth info for this machine
	case `uname` in
		Linux*)
			if [ -z "`hostname --version 2>&1 | grep GNU`" ]
			then
				hostname=`hostname -f`
			else
				hostname=`hostname`
			fi
			;;
		*)
			hostname=`hostname`
			;;
	esac

	authdisplay=${display:-:0}

	mcookie=`/usr/bin/mcookie`

	if [ -z "$mcookie" ]
	then
		echo "Couldn't create cookie"
		exit 1
	fi
	dummy=0

	# create the file with auth information for the server.
	xserverauthfile=$XAUTHORITY
	trap "rm -f '$xserverauthfile'" HUP INT QUIT ILL TRAP KILL BUS TERM
	echo "add :$dummy . $mcookie" | xauth -q -f "$xserverauthfile"

serverargs=${serverargs}" -auth "${xserverauthfile}

# now add the same credentials to the client authority file
# if '$displayname' already exists do not overwrite it as another
# server man need it. Add them to the '$xserverauthfile' instead.
for displayname in $authdisplay $hostname$authdisplay
do
	authcookie=`xauth list "$displayname" \
		| sed -n "s/.*$displayname[[:space:]*].*[[:space:]*]//p"` 2>/dev/null;
	if [ -z "$authcookie" ]
	then
		echo "add $displayname . $mcookie" | xauth -q
		removelist="$displayname $removelist"
	else
		dummy=$(($dummy+1));
		echo "add :$dummy . $authcookie" | xauth -q -f "$xserverauthfile"
	fi
done
fi

xinit "$client" $clientargs -- "$server" $display $serverargs

retval=$?

if [ -n "$enable_xauth" ]
then
	if [ -z "$removelist" ]
	then
		xauth remove $removelist
	fi
	if [ -n "$xserverauthfile" ]
	then
		rm -f "$xserverauthfile"
	fi
fi

exit $retval
